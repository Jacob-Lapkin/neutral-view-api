openapi: 3.0.0
info:
  title: Neutral View API
  version: 1.0.0
  description: API for fact verification platform "Neutral View".

paths:

  /auth/register:
    post:
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Bad request or user already exists.

  /auth/login:
    post:
      summary: Authenticate user and return JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful.
        '401':
          description: Unauthorized or invalid credentials.

  /auth/token/validate:
    get:
      summary: Check if a JWT is valid.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token is valid.
        '401':
          description: Invalid or expired token.

  /auth/token/refresh:
    get:
      summary: Obtain a new token using the refresh token.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
      responses:
        '200':
          description: New token issued.
        '401':
          description: Invalid refresh token.
  /claims:
    get:
      summary: Retrieve claims.
      responses:
        '200':
          description: List of claims retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClaimResponse'
    post:
      summary: Submit a new claim for analysis.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - claim
              properties:
                claim:
                  type: string
      responses:
        '200':
          description: Claim submitted and analyzed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimSubmitResponse'
        '400':
          description: Bad request, claim data is required.

components:
  schemas:
    ClaimResponse:
      type: object
      properties:
        claim:
          type: string
        claimUsage:
          $ref: '#/components/schemas/ClaimUsage'
        claimData:
          $ref: '#/components/schemas/ClaimData'
        claimId:
          type: string
    ClaimSubmitResponse:
      type: object
      properties:
        status:
          type: string
        claimResponse:
          $ref: '#/components/schemas/ClaimResponse'
    ClaimUsage:
      type: object
      properties:
        totalCost:
          type: number
        totalTokens:
          type: number
    ClaimData:
      type: object
      properties:
        factScore:
          type: integer
          format: int32
        explanation:
          type: string
        icon:
          type: string
        sourceUrl:
          type: string
